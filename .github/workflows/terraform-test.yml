name: "Terraform Tests"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_LOG: DEBUG
  PYTHONUNBUFFERED: 1

jobs:
  validate:
    name: "Validate Terraform"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  test:
    name: "Run Tests"
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install azure-cli

      - name: Verify Azure Login
        run: |
          echo "Current Azure Account:"
          az account show
          echo "Setting Azure Subscription..."
          az account set --subscription="${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Inject Sensitive Variables into terraform.tfvars
        run: |
          echo "tenant_id     = \"${{ secrets.AZURE_TENANT_ID }}\"" >> environments/staging/terraform.tfvars
          echo "client_id     = \"${{ secrets.AZURE_CLIENT_ID }}\"" >> environments/staging/terraform.tfvars
          echo "client_secret = \"${{ secrets.AZURE_CLIENT_SECRET }}\"" >> environments/staging/terraform.tfvars
          echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> environments/staging/terraform.tfvars

      - name: Test Environments
        run: |
          for env in dev staging prod; do
            echo "=== Testing $env Environment ==="
            if [ ! -d "environments/$env" ]; then
              echo "$env environment directory not found. Skipping..."
              continue
            fi
            cd environments/$env
            terraform init -no-color -backend=false > init.log 2>&1 || {
              cat init.log
              exit 1
            }
            terraform validate -no-color > validate.log 2>&1 || {
              cat validate.log
              exit 1
            }
            terraform plan -no-color -input=false -var="environment=$env" > plan.log 2>&1 || {
              echo "=== Plan Failed for $env ==="
              TF_LOG=DEBUG terraform plan -no-color -input=false -var="environment=$env" > debug.log 2>&1
              cat debug.log
              exit 1
            }
            cd - > /dev/null
          done

      - name: Upload Test Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failed-test-logs
          path: |
            environments/dev/*.log
            environments/staging/*.log
            environments/prod/*.log

  deploy:
    name: "Deploy Infrastructure"
    needs: [validate, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve