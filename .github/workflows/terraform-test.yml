name: "Infrastructure Testing"

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
# Environment variables for Azure authentication
env:
  PYTHON_VERSION: "3.9"
  TERRAFORM_VERSION: "1.0.0"
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
jobs:
  test:
    name: "Test Infrastructure"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      # Test Development Environment on Pull Requests
      - name: Test Development Environment
        if: github.event_name == 'pull_request'
        run: |
          echo "Testing Development Environment..."
          python tests/infrastructure_test.py --environment dev --ci

      # Test Staging Environment on Pull Requests
      - name: Test Staging Environment
        if: github.event_name == 'pull_request'
        run: |
          echo "Testing Staging Environment..."
          python tests/infrastructure_test.py --environment staging --ci

      # Test Production Environment only on main branch
      - name: Test Production Environment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Testing Production Environment..."
          python tests/infrastructure_test.py --environment prod --ci

      # Generate and upload test report
      - name: Generate Test Report
        run: |
          python tests/infrastructure_test.py --report

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-report.json
  # Plan job - runs after tests pass
  plan:
    name: "Plan Infrastructure Changes"
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Show Plan
        run: terraform show -no-color tfplan > plan.txt

      - name: Comment Plan
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const maxLength = 65536;
            const planOutput = plan.length > maxLength ? 
              plan.substr(0, maxLength) + "\n... Output truncated" : plan;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Output\n\`\`\`\n${planOutput}\n\`\`\``
            })
  # Apply job - runs after tests pass and only on main branch
  apply:
    name: "Apply Infrastructure Changes"
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
