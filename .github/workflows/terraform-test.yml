name: "Terraform Tests"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: "26fa681b-266b-4a85-b7f0-d0b40312d4e0"
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_LOG: DEBUG
  PYTHONUNBUFFERED: 1

jobs:
  staging-test:
    name: "Test Staging Environment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Test Staging
        run: |
          echo "=== Testing Staging Environment ==="
          if [ ! -d "environments/staging" ]; then
            echo "Staging environment directory not found. Skipping..."
            exit 0
          fi
          cd environments/staging
          
          echo "Creating terraform.tfvars..."
          cat > terraform.tfvars <<EOF
          environment = "staging"
          location = "eastus"
          project_name = "azure-iac-test"
          subscription_id = "$ARM_SUBSCRIPTION_ID"
          address_space = ["10.0.0.0/16"]
          allowed_ip_ranges = [
            "184.89.240.160/30",
            "20.37.158.0/23",
            "20.37.194.0/24",
            "20.38.34.0/23"
          ]
          admin_username = "azureuser"
          tenant_id = "$ARM_TENANT_ID"
          client_id = "$ARM_CLIENT_ID"
          client_secret = "$ARM_CLIENT_SECRET"
          EOF
          
          # Create temporary backend config
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {}
          }
          EOF
          
          echo "Running Terraform Init..."
          terraform init -no-color > staging_init.log 2>&1 || { cat staging_init.log; exit 1; }

          echo "Running Terraform Validate..."
          terraform validate -no-color > staging_validate.log 2>&1 || { cat staging_validate.log; exit 1; }

          echo "Running Terraform Plan..."
          terraform plan -no-color -input=false > staging_plan.log 2>&1 || {
            echo "=== Plan Failed ==="
            echo "Debugging Output:"
            cat staging_plan.log
            TF_LOG=DEBUG terraform plan -no-color -input=false > staging_debug.log 2>&1
            cat staging_debug.log
            exit 1
          }
          
          # Clean up temporary files
          rm backend_override.tf terraform.tfvars

  validate:
    name: "Validate Terraform"
    needs: staging-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Terraform Format
        run: terraform fmt -check
      - name: Terraform Init
        run: terraform init -backend=false
      - name: Terraform Validate
        run: terraform validate

  test:
    name: "Run Other Tests"
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install azure-cli
      - name: Test Core Modules
        run: python tests/infrastructure_test.py --ci --test-type modules --output test_results_modules.json
      - name: Test Backend
        run: python tests/infrastructure_test.py --ci --test-type backend --output test_results_backend.json
      - name: Test All Environments
        run: python tests/infrastructure_test.py --ci --test-type all-env --output test_results_allenv.json

  deploy:
    name: "Deploy Infrastructure"
    needs: [validate, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve