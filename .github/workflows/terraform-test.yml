name: "Terraform Tests"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  validate:
    name: "Validate Terraform"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Print clientId
        run: |
          CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          echo "$CREDS" | jq -r .clientId
           

      - name: Set Azure Credentials as Environment Variables
        run: |
          CREDS=${{ secrets.AZURE_CREDENTIALS }}
          ARM_CLIENT_ID=$(echo $CREDS | jq -r .clientId)
          ARM_CLIENT_SECRET=$(echo $CREDS | jq -r .clientSecret)
          ARM_TENANT_ID=$(echo $CREDS | jq -r .tenantId)
          ARM_SUBSCRIPTION_ID=$(echo $CREDS | jq -r .subscriptionId)
          
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "TF_LOG=DEBUG" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Debug JSON in GitHub
        run: |
          echo "$CREDS" | jq .


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize and Plan Staging
        run: |
          cd environments/staging
          terraform init

          echo "Running terraform plan with detailed output..."
          terraform plan -detailed-exitcode -input=false || {
          echo "Terraform plan failed. Exit code: $?"
          echo "Current directory contents:"
          ls -la
          echo "Environment variables set:"
          env | grep ARM_ | sed 's/=.*/=****/'
          echo "Terraform state list:"
          terraform state list || echo "No state found"
          exit 1
            }
          env:
            TF_LOG: DEBUG
  









  modules-test:
    name: "Test Infrastructure Modules"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Test Networking Module
        run: |
          cd modules/networking
          echo "Test: Networking Module Init"
          SECONDS=0
          terraform init -no-color > networking_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat networking_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat networking_init.log)"

          echo "Test: Networking Module Validate"
          SECONDS=0
          terraform validate -no-color > networking_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS
          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat networking_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat networking_validate.log)"
          cd ../..

      - name: Test Security Module
        run: |
          cd modules/security
          echo "Test: Security Module Init"
          SECONDS=0
          terraform init -no-color > security_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat security_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat security_init.log)"

          echo "Test: Security Module Validate"
          SECONDS=0
          terraform validate -no-color > security_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS
          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat security_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat security_validate.log)"
          cd ../..

      - name: Test Storage Module
        run: |
          cd modules/storage
          echo "Test: Storage Module Init"
          SECONDS=0
          terraform init -no-color > storage_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat storage_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat storage_init.log)"

          echo "Test: Storage Module Validate"
          SECONDS=0
          terraform validate -no-color > storage_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS
          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat storage_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat storage_validate.log)"
          cd ../..

      - name: Test Compute Module
        run: |
          cd modules/compute
          echo "Test: Compute Module Init"
          SECONDS=0
          terraform init -no-color > compute_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat compute_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat compute_init.log)"

          echo "Test: Compute Module Validate"
          SECONDS=0
          terraform validate -no-color > compute_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS
          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat compute_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat compute_validate.log)"
          cd ../..
  
  backend-test:
    name: "Test Backend Configuration"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Test Backend
        run: |
          echo "Test: Backend Configuration Init"
          SECONDS=0
          terraform init -no-color > backend_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat backend_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat backend_init.log)"

          echo "Test: Backend Configuration Validate"
          SECONDS=0
          terraform validate -no-color > backend_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS

          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat backend_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat backend_validate.log)"
  
  staging-test:
    name: "Test Staging Environment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Test Staging
        run: |
          echo "Test: Staging Terraform Init"
          if [ ! -d "environments/staging" ]; then
            echo "Status: ⚠️ SKIP" 
            echo "Duration: 0s"
            echo "Output: Staging environment directory not found"
            exit 0
          fi
          cd environments/staging
          
          cat > terraform.tfvars <<EOF
          environment = "staging"
          location = "eastus"
          project_name = "azure-iac-test"
          subscription_id = "$ARM_SUBSCRIPTION_ID"
          address_space = ["10.0.0.0/16"]
          allowed_ip_ranges = [
            "184.89.240.160/30", 
            "20.37.158.0/23",
            "20.37.194.0/24",
            "20.38.34.0/23"
          ]
          admin_username = "azureuser"
          tenant_id = "$ARM_TENANT_ID"
          client_id = "$ARM_CLIENT_ID"
          client_secret = "$ARM_CLIENT_SECRET"
          EOF

          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {}
          }
          EOF

          SECONDS=0
          terraform init -no-color > staging_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat staging_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat staging_init.log)"

          echo "Test: Staging Terraform Validate"
          SECONDS=0
          terraform validate -no-color > staging_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS

          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat staging_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat staging_validate.log)"

          echo "Test: Staging Terraform Plan" 
          SECONDS=0
          terraform plan -no-color -input=false > staging_plan.log 2>&1
          plan_status=$?
          plan_duration=$SECONDS

          if [ $plan_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat staging_plan.log
            exit 1
          fi
          echo "Duration: ${plan_duration}s"
          echo "Output: Plan generated successfully"

          rm backend_override.tf terraform.tfvars

  dev-test:
    name: "Test Dev Environment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Test Dev
        run: |
          echo "Test: Dev Terraform Init"
          if [ ! -d "environments/dev" ]; then
            echo "Status: ⚠️ SKIP" 
            echo "Duration: 0s"
            echo "Output: Dev environment directory not found"
            exit 0
          fi
          cd environments/dev
          
          cat > terraform.tfvars <<EOF
          environment = "dev"
          location = "eastus"
          project_name = "azure-iac-test"
          subscription_id = "$ARM_SUBSCRIPTION_ID"
          address_space = ["10.0.0.0/16"]
          allowed_ip_ranges = [
            "184.89.240.160/30", 
            "20.37.158.0/23",
            "20.37.194.0/24",
            "20.38.34.0/23"
          ]
          admin_username = "azureuser"
          tenant_id = "$ARM_TENANT_ID"
          client_id = "$ARM_CLIENT_ID"
          client_secret = "$ARM_CLIENT_SECRET"
          EOF

          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {}
          }
          EOF

          SECONDS=0
          terraform init -no-color > dev_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat dev_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat dev_init.log)"

          echo "Test: Dev Terraform Validate"
          SECONDS=0
          terraform validate -no-color > dev_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS

          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat dev_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat dev_validate.log)"

          echo "Test: Dev Terraform Plan" 
          SECONDS=0
          terraform plan -no-color -input=false > dev_plan.log 2>&1
          plan_status=$?
          plan_duration=$SECONDS

          if [ $plan_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat dev_plan.log
            exit 1
          fi
          echo "Duration: ${plan_duration}s"
          echo "Output: Plan generated successfully"

          rm backend_override.tf terraform.tfvars

  prod-test:
    name: "Test Production Environment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      - name: Test Production
        run: |
          echo "Test: Production Terraform Init"
          if [ ! -d "environments/prod" ]; then
            echo "Status: ⚠️ SKIP" 
            echo "Duration: 0s"
            echo "Output: Production environment directory not found"
            exit 0
          fi
          cd environments/prod
          
          cat > terraform.tfvars <<EOF
          environment = "prod"
          location = "eastus"
          project_name = "azure-iac-test"
          subscription_id = "$ARM_SUBSCRIPTION_ID"
          address_space = ["10.0.0.0/16"]
          allowed_ip_ranges = [
            "184.89.240.160/30", 
            "20.37.158.0/23",
            "20.37.194.0/24",
            "20.38.34.0/23"
          ]
          admin_username = "azureuser"
          tenant_id = "$ARM_TENANT_ID"
          client_id = "$ARM_CLIENT_ID"
          client_secret = "$ARM_CLIENT_SECRET"
          EOF

          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {}
          }
          EOF

          SECONDS=0
          terraform init -no-color > prod_init.log 2>&1
          init_status=$?
          init_duration=$SECONDS
          
          if [ $init_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat prod_init.log
            exit 1
          fi
          echo "Duration: ${init_duration}s"
          echo "Output: $(cat prod_init.log)"

          echo "Test: Production Terraform Validate"
          SECONDS=0
          terraform validate -no-color > prod_validate.log 2>&1
          validate_status=$?
          validate_duration=$SECONDS

          if [ $validate_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat prod_validate.log
            exit 1
          fi
          echo "Duration: ${validate_duration}s"
          echo "Output: $(cat prod_validate.log)"

          echo "Test: Production Terraform Plan" 
          SECONDS=0
          terraform plan -no-color -input=false > prod_plan.log 2>&1
          plan_status=$?
          plan_duration=$SECONDS

          if [ $plan_status -eq 0 ]; then
            echo "Status: ✅ PASS"
          else
            echo "Status: ❌ FAIL"
            cat prod_plan.log
            exit 1
          fi
          echo "Duration: ${plan_duration}s"
          echo "Output: Plan generated successfully"

          rm backend_override.tf terraform.tfvars

  deploy:
    name: "Deploy Infrastructure"
    if: false  # Always skip but keep visible
    needs: [validate, modules-test, backend-test, dev-test, staging-test, prod-test]
    runs-on: ubuntu-latest
    steps:
      - name: Future Deployment Steps
        run: |
          echo "Future deployment will include:"
          echo "1. Deploy to dev environment"
          echo "2. Deploy to staging with validation"
          echo "3. Deploy to prod with approvals"
          echo "4. Post-deployment health checks"

          